diff --git a/node_modules/expo-router/build/useScreens.d.ts b/node_modules/expo-router/build/useScreens.d.ts
index 3b39937..f485eeb 100644
--- a/node_modules/expo-router/build/useScreens.d.ts
+++ b/node_modules/expo-router/build/useScreens.d.ts
@@ -29,9 +29,7 @@ export declare function useSortedScreens(order: ScreenProps[]): React.ReactNode[
 /** Wrap the component with various enhancements and add access to child routes. */
 export declare function getQualifiedRouteComponent(value: RouteNode): React.ComponentType<any> | React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
 /** @returns a function which provides a screen id that matches the dynamic route name in params. */
-export declare function createGetIdForRoute(route: Pick<RouteNode, 'dynamic' | 'route' | 'contextKey' | 'children'>): ({ params }?: {
-    params?: Record<string, any> | undefined;
-}) => any;
+export declare function createGetIdForRoute(route: Pick<RouteNode, 'dynamic' | 'route' | 'contextKey' | 'children'>, getId: ScreenProps['getId']): ScreenProps['getId']
 export declare function screenOptionsFactory(route: RouteNode, options?: ScreenProps['options']): RouteConfig<any, any, any, any, any, any>['options'];
-export declare function routeToScreen(route: RouteNode, { options, ...props }?: Partial<ScreenProps>): React.JSX.Element;
+export declare function routeToScreen(route: RouteNode, { options, getId, ...props }?: Partial<ScreenProps>): React.JSX.Element;
 //# sourceMappingURL=useScreens.d.ts.map
diff --git a/node_modules/expo-router/build/useScreens.js b/node_modules/expo-router/build/useScreens.js
index e574029..fd36821 100644
--- a/node_modules/expo-router/build/useScreens.js
+++ b/node_modules/expo-router/build/useScreens.js
@@ -139,18 +139,24 @@ function getQualifiedRouteComponent(value) {
 }
 exports.getQualifiedRouteComponent = getQualifiedRouteComponent;
 /** @returns a function which provides a screen id that matches the dynamic route name in params. */
-function createGetIdForRoute(route) {
+function createGetIdForRoute(route, getId) {
     const include = new Map();
     if (route.dynamic) {
         for (const segment of route.dynamic) {
             include.set(segment.name, segment);
         }
     }
-    return ({ params = {} } = {}) => {
+    return (options = {}) => {
+        const { params = {} } = options;
         if (params.__EXPO_ROUTER_key) {
-            const key = params.__EXPO_ROUTER_key;
-            delete params.__EXPO_ROUTER_key;
+          const key = params.__EXPO_ROUTER_key;
+          delete params.__EXPO_ROUTER_key;
+          if (getId == null) {
             return key;
+          }
+        }
+        if (getId != null) {
+          return getId(options);
         }
         const segments = [];
         for (const dynamic of include.values()) {
@@ -195,10 +201,10 @@ function screenOptionsFactory(route, options) {
     };
 }
 exports.screenOptionsFactory = screenOptionsFactory;
-function routeToScreen(route, { options, ...props } = {}) {
+function routeToScreen(route, { options, getId, ...props } = {}) {
     return (<primitives_1.Screen
     // Users can override the screen getId function.
-    getId={createGetIdForRoute(route)} {...props} name={route.route} key={route.route} options={screenOptionsFactory(route, options)} getComponent={() => getQualifiedRouteComponent(route)}/>);
+    getId={createGetIdForRoute(route, getId)} {...props} name={route.route} key={route.route} options={screenOptionsFactory(route, options)} getComponent={() => getQualifiedRouteComponent(route)}/>);
 }
 exports.routeToScreen = routeToScreen;
 //# sourceMappingURL=useScreens.js.map
